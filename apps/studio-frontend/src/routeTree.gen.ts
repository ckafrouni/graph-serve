/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StudioRouteImport } from './routes/studio/route'
import { Route as StatusIndexImport } from './routes/status/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as StudioPlaygroundIndexImport } from './routes/studio/playground/index'
import { Route as StudioDashboardIndexImport } from './routes/studio/dashboard/index'

// Create/Update Routes

const StudioRouteRoute = StudioRouteImport.update({
  id: '/studio',
  path: '/studio',
  getParentRoute: () => rootRoute,
} as any)

const StatusIndexRoute = StatusIndexImport.update({
  id: '/status/',
  path: '/status/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const StudioPlaygroundIndexRoute = StudioPlaygroundIndexImport.update({
  id: '/playground/',
  path: '/playground/',
  getParentRoute: () => StudioRouteRoute,
} as any)

const StudioDashboardIndexRoute = StudioDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => StudioRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/studio': {
      id: '/studio'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof StudioRouteImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/status/': {
      id: '/status/'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusIndexImport
      parentRoute: typeof rootRoute
    }
    '/studio/dashboard/': {
      id: '/studio/dashboard/'
      path: '/dashboard'
      fullPath: '/studio/dashboard'
      preLoaderRoute: typeof StudioDashboardIndexImport
      parentRoute: typeof StudioRouteImport
    }
    '/studio/playground/': {
      id: '/studio/playground/'
      path: '/playground'
      fullPath: '/studio/playground'
      preLoaderRoute: typeof StudioPlaygroundIndexImport
      parentRoute: typeof StudioRouteImport
    }
  }
}

// Create and export the route tree

interface StudioRouteRouteChildren {
  StudioDashboardIndexRoute: typeof StudioDashboardIndexRoute
  StudioPlaygroundIndexRoute: typeof StudioPlaygroundIndexRoute
}

const StudioRouteRouteChildren: StudioRouteRouteChildren = {
  StudioDashboardIndexRoute: StudioDashboardIndexRoute,
  StudioPlaygroundIndexRoute: StudioPlaygroundIndexRoute,
}

const StudioRouteRouteWithChildren = StudioRouteRoute._addFileChildren(
  StudioRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/studio': typeof StudioRouteRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/status': typeof StatusIndexRoute
  '/studio/dashboard': typeof StudioDashboardIndexRoute
  '/studio/playground': typeof StudioPlaygroundIndexRoute
}

export interface FileRoutesByTo {
  '/studio': typeof StudioRouteRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/status': typeof StatusIndexRoute
  '/studio/dashboard': typeof StudioDashboardIndexRoute
  '/studio/playground': typeof StudioPlaygroundIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/studio': typeof StudioRouteRouteWithChildren
  '/login/': typeof LoginIndexRoute
  '/status/': typeof StatusIndexRoute
  '/studio/dashboard/': typeof StudioDashboardIndexRoute
  '/studio/playground/': typeof StudioPlaygroundIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/studio'
    | '/login'
    | '/status'
    | '/studio/dashboard'
    | '/studio/playground'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/studio'
    | '/login'
    | '/status'
    | '/studio/dashboard'
    | '/studio/playground'
  id:
    | '__root__'
    | '/studio'
    | '/login/'
    | '/status/'
    | '/studio/dashboard/'
    | '/studio/playground/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  StudioRouteRoute: typeof StudioRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
  StatusIndexRoute: typeof StatusIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  StudioRouteRoute: StudioRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
  StatusIndexRoute: StatusIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/studio",
        "/login/",
        "/status/"
      ]
    },
    "/studio": {
      "filePath": "studio/route.tsx",
      "children": [
        "/studio/dashboard/",
        "/studio/playground/"
      ]
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/status/": {
      "filePath": "status/index.tsx"
    },
    "/studio/dashboard/": {
      "filePath": "studio/dashboard/index.tsx",
      "parent": "/studio"
    },
    "/studio/playground/": {
      "filePath": "studio/playground/index.tsx",
      "parent": "/studio"
    }
  }
}
ROUTE_MANIFEST_END */
